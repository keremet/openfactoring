Отображение остатка лимита дебитора, отображение суммы лимитов дебиторов
История свойств пары клиент-дебитор
Итого обороты по счету
Движение по счетам накладной с даты ее выкупа
закрытие только тех накладных, по которым было списание
favicon.ico
диаграмма внешней и внутренней БД
возможность отката в предыдущее состояние
	права на изменение уже авторизованных накладных (по ошибке ввели другого дебитора)
	ведение лога операций с кнопкой откат
	
перенос из ва-банка в новый факторинг


безопасность: ограничения по IP, сессия
производительность: индексы, кэширование, подключение к БД раз за сессию
table.begin (конструктор)
table.header (массив строк)
table.row (массив кусков HTML-кода)
table.end (деструктор)
	
отчеты через cgi	
	
Даты накладной:
	дата накладной
	отсрочки по договору
	отсрочки банка
	уступки	(дата реестра)

Имеющиеся отчеты-действия:	
	Отчет по факторинговому обслуживанию для Клиента
	Распоряжение в бухгалтерию	
	создание счета 61212 по кнопке у поля
	Закрыть списанные накладные
	Списать накладные на дату
	Списать 1 накладную
	Справка о сумме задолженности для Клиента
	Справка о сумме задолженности для Дебитора

	
интерфейс:	
	функция вывода в таблицу
	Движение по счету
	ввод даты через GUI
	история операций по договору со ссылками на документы
	горячие клавиши
	
Функциональность:
	отмена авторизации реестра
	отмена авторизации накладной

Технология:	
	Зона с AMP.
	PHP и oracle (http://www.php.su/articles/?cat=phpdb&page=023, http://www.netlinxinc.com/netlinx-blog/53-php/10-using-php-with-oracle-instantclient-on-solaris.html)





Зачем новая программа - сделать более удобным самый трудоемкий процесс на факторинге - ввод накладных.
Косяки вводилки ФОРСа:
- при отображении номер накладной не помещается в поле, и накладные кажутся одинаковыми. Выявление различия требует доп. усилий
- Возможность ввести клиента, не являющегося дебитором
- Медленное сохранение.
- Невозможно удалить единственную накладную
- Поиск накладных не за одно действие, а за щелчок мышью, F7, F8
- Надо менять содержимое файла реестра перед его загрузкой.
- Отображение не всех накладных реестра, а по 5 штук.
- Нет отображения списка договоров и реестров в явном виде
- Затруднительно посмотреть список накладных, загруженных из файла в формате csv, присылаемого клиентом.
- Медленно работает (пользователь ожидает долго: поиск договоров, открытие карточки договора, сохранение накладной)
- Влияние на кредитный модуль (блокировки при постановке, групповые операции, в отчетах надо прописывать отсечение ФТ, что забывается)

Резервы - средствами АБС.

Части проекта:
Постановка накладных
Списание
Отчеты


Отчеты

Постановка накладных (параметр - начальник)
	Ищет накладные без реестра, выполянет их постановку. Выводит справки о сумме задолженности для Клиента и Дебитора, какими бы они были, если бы созданные документы были авторизованы.
Отменить постановку накладных(параметр - номер реестра)

Списать накладные (параметр - начальник)
Списать накладные на дату  (параметр - начальник, дата)
Списать 1 накладную (параметр - начальник, номер накладной)

Закрыть списанные накладные (может быть автоматически при следующем списании?)


Справка о сумме задолженности для Клиента (дата)
Справка о сумме задолженности для Дебитора (дата)
Отчет по факторинговому обслуживанию для Клиента (период)
Отчет по пеням (Дебитор, период)
Просрочка по факторингу (дата)
Реестр (номер)


Уведомление о лимитах финансирования для Клиента (дата)



Форма просмотра параметров договора и создания договора.


Параметры договора
* Ставка комиссии за финансирование 
* Номер последнего реестра
* Обеспечение



TODO:
Документация пользователя по ходу разработки.


Результат проекта:
Демонстрационный cайт php, sqlite.
Демонстрационный образ VirtualBox: OpenIndiana, Apache, PHP (для работы с Oracle), Firefox





Контроль корректности вводимых накладных должен быть на javascript. 





oracle будет лучше по соображениям его изученности, возможность копирования наработок, размещения факторинга как схемы в БД - более простой и быстрый шлюз


Смоделировать на UML

Сущности: АБС, поставщики, дебиторы, реестры, накладные, модуль отчетов (ODF, HTML), глобальные настройки, модуль резервов(потом)


class Gate{	//интерфейс к АБС
public:	
	typedef struct {
		int cust_no;
		char* name;
	} Customer;
	typedef struct {
		int docnum;
		time_t date;
		char cor_acc[20];
		double sum; //>0 - дебит, <0 - кредит
	} Entry;
	
	boot init (login, passwd, db); //инициализация (логин, пароль, название базы)
	void exit (); //отключение от БД
	void commit();
	void rollback();
//Счета
	char* createAcc(balance2, name, cust_no); //создание счета (баланс 2-го порядка, название, номер клиента) возвращается номер счета
	bool closeAcc(acc_id); //закрытие счета (номер счета)
	double remainder(acc_id, date);	//остаток на счете (номер счета, дата) 
	char* accName(acc_id);
	Entry* getEntries(acc_id, dateB, dateE)//движение по счету	
//Документы
	int createDoc(acc_debit, acc_credit, sum, nazn_plat, doc_type); //создание документа (Дт, Кт, Сумма, назначение платежа, тип документа) возвращает номер документа
	bool rollbackDoc(int docnum); //отмена документа, возвращает true при успехе
//Клиенты	
	Customer* getCusts(char* substr); //список клиентов (номер и название) по подстроке в названии
	char* custName(int cust_no); //название клиента по номеру
};
	
	

глобальные настройки 
	Счета модуля(70601, 60309, 60311, дата опердня)	
Формы: клиенты, дебиторы, реестры, накладные. Фильтр в форме зависит от того, из какой формы на нее перешли.
Клиенты (добавление через шлюз по номеру или через поиск по подстроке в названии, удаление)
	Свойства: Код в АБС, название, счета(расчетный счет, 47401), договор факторинга (номер, дата), комиссия за финансирование, следующий номер реестра.
	Сортировка
	методы: 
		*получить следующий номер реестра
		*получить сумму лимитов дебиторов
		*получить список дебиторов
		*добавить дебитора
		*удалить дебитора
		*списание накладных		
Дебиторы клиента (добавление через шлюз по номеру или через поиск по подстроке в названии, удаление)
	свойства: лимит, номер договор поставки, дата договора поставки, счет 61212, срок отсрочки банка, срок отсрочки по договору, единовременная комиссия 
	методы: остаток свободного лимита
	!историчность свойств
Свойство дебитора как клиета АБС - процент резерва, категория качества, портфель
Реестры клиента
	свойства: внутренний номер, дата, клиент
	методы: авторизация всего реестра, вывод распоряжений в бухгалтерию, вывод реестра
Накладные реестра
	свойства: дата, номер, сумма, плательщик, счета(91418, 47803)
	методы: 
		создание (дата, номер, сумма, плательщик)
		погашение накладной
		закрытие накладной

Процедура погашения
Автоматический запуск по cron функции через psql

Отчеты через cgi:
Отчет по задолженности для дебитора
Отчет по задолженности для клиента
Отчет по факторинговому обслуживанию для Клиента
Распоряжение в бухгалтерию

Учет просрочки.

Недостаток: надо обращаться к ва-банку при необходимости увидеть карточку клиента, выписку по счету и тд.
Фишки: простота(нет избыточных компонентов, например схем и договоров), открытый код, документированность, производительность, продуктивность работы (программа подстроена под технологический процесс, простота добавления клиентов и дебиторов, удобный поиск и ввод накладных), внедренность(к ней надо стремиться), отказ от использования кредитного модуля устраняет зависимость от него и влияние на него, наличие понятия реестра, защищенность от некорректного ввода (ввод в поля с адекватным названием, база не позволит внести лишние данные и не ввести необходимые), поиск клиентов не по номерам или названиям, а выбором из списка, отсутствие дубрирования и связанных с ним ошибок (общие для модуля счета, счет 61212 дебитора).
Некорректность у ФОРСа: отображение процента резерва по договору факторинга, счета создаются на поставщика.

Должна быть возможность откатить ошибочно выполненную операцию (любую).

Протоколирование всей действий пользователя.

Больше информации в функцию отчета: положение курсора в таблице накладных.


Регрессионные тесты для каждого класса

Создать сайт проекта, баг-трекер, репозиторий. 


Кнопка "на изменение": копируются данные из строки в поля ввода. Кнопка "добавить" меняется на "изменить". При нажатии на "изменить" выполняются изменения, метка кнопки меняется на "добавить", перечитывается таблица.

Создание реестра:
Новые накладные сохраняются при добавлении. Добавляются к "новому реестру" (номер 0).
